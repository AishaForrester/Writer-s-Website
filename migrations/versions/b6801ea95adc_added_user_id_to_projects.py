from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = 'b6801ea95adc'
down_revision = '48152a61ed87'
branch_labels = None
depends_on = None


def upgrade():
    # Get the table's inspector
    inspector = inspect(op.get_bind())
    
    # Check if the 'user_id' column already exists in the 'projects' table
    if 'user_id' not in [column['name'] for column in inspector.get_columns('projects')]:
        # Add the 'user_id' column if it doesn't already exist
        with op.batch_alter_table('projects', schema=None) as batch_op:
            batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=True))  # Allow nulls initially
    
    # Add the foreign key constraint if the column was added
    op.create_foreign_key(None, 'projects', 'user_account', ['user_id'], ['id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('user_id')

    # ### end Alembic commands ###
